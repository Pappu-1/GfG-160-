class Solution {

    ArrayList<Integer> search(String pat, String txt) {
        // your code here
        int n = txt.length();
        int m = pat.length();
        ArrayList<Integer> ans = new ArrayList<>();

        // Edge case: pattern is longer than text
        if (m > n) {
            return ans; // No matches possible
        }

        // Precompute LPS array
        int[] LPS = new int[m];
        int pre = 0;
        for (int suf = 1; suf < m; ) {
            if (pat.charAt(pre) == pat.charAt(suf)) {
                LPS[suf++] = ++pre;
            } else if (pre > 0) {
                pre = LPS[pre - 1];
            } else {
                LPS[suf++] = 0;
            }
        }

        // Perform KMP search
        int i = 0, j = 0;
        while (i < n) {
            if (txt.charAt(i) == pat.charAt(j)) {
                i++;
                j++;
            }
            if (j == m) {
                ans.add(i - m ); // Add 1 for 1-based indexing
                j = LPS[j - 1];
            } else if (i < n && txt.charAt(i) != pat.charAt(j)) {
                if (j != 0) {
                    j = LPS[j - 1];
                } else {
                    i++;
                }
            }
        }

        return ans;
    }
}
