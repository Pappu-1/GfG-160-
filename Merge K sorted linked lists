//JAVA


// User function Template for Java
/*class Node
{
    int data;
    Node next;

    Node(int key)
    {
        data = key;
        next = null;
    }
}
*/

// arr is an array of Nodes of the heads of linked lists

class Solution {
    // Function to merge K sorted linked list.
    Node mergeKLists(List<Node> arr) {
        // Add your code here.
        PriorityQueue<Node> pq = new PriorityQueue<>(
            (a,b) -> Integer.compare(a.data,b.data));
        for(Node a:arr){
            if(a != null){
                pq.add(a);
            }
        }
        Node dummy = new Node(0);
        Node temp = dummy;
        while(!pq.isEmpty()){
            Node newNode = pq.poll();
            temp.next = newNode;
            temp = temp.next;
            
            if(newNode.next != null){
                pq.add(newNode.next);
            }
        }
        return dummy.next;
    }
}
//python
#User function Template for python3
'''
class Node:
    def _init_(self,x):
        self.data = x
        self.next = None
'''
import heapq
class Solution:
    def mergeKLists(self, arr):
        # code here
        # return head of merged list
        pq = []
        for i, head in enumerate(arr):
            if head:
                heapq.heappush(pq, (head.data, i, head))
            
        dummy = Node(0)
        tail = dummy
        
        while pq:
            val, i, min_node = heapq.heappop(pq)
            tail.next = min_node
            tail = tail.next
            if min_node.next:
                heapq.heappush(pq, (min_node.next.data, i, min_node.next))
            
        return dummy.next
